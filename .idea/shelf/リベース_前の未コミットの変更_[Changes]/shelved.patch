Index: frontend/.env
===================================================================
diff --git a/frontend/.env b/frontend/.env
deleted file mode 100644
--- a/frontend/.env	(revision 658efcd1e9d42f82fe68a8b1e41bdd79c0a29d40)
+++ /dev/null	(revision 658efcd1e9d42f82fe68a8b1e41bdd79c0a29d40)
@@ -1,7 +0,0 @@
-# Environment variables declared in this file are automatically made available to Prisma.
-# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema
-
-# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
-# See the documentation for all the connection string options: https://pris.ly/d/connection-strings
-
-DATABASE_URL=""
\ No newline at end of file
Index: frontend/prisma/schema.prisma
===================================================================
diff --git a/frontend/prisma/schema.prisma b/frontend/prisma/schema.prisma
deleted file mode 100644
--- a/frontend/prisma/schema.prisma	(revision 658efcd1e9d42f82fe68a8b1e41bdd79c0a29d40)
+++ /dev/null	(revision 658efcd1e9d42f82fe68a8b1e41bdd79c0a29d40)
@@ -1,74 +0,0 @@
-generator client {
-  provider = "prisma-client-js"
-}
-
-datasource db {
-  provider = "mysql"
-  url      = env("DATABASE_URL")
-}
-
-model CategoriesOnPosts {
-  postId     String
-  categoryId String
-  assignedAt DateTime @default(now())
-  assignedBy String
-  Category   Category @relation(fields: [categoryId], references: [id])
-  Post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
-
-  @@id([postId, categoryId])
-  @@index([categoryId], map: "CategoriesOnPosts_categoryId_fkey")
-}
-
-model Category {
-  id                String              @id
-  name              String
-  userId            String
-  CategoriesOnPosts CategoriesOnPosts[]
-  User              User                @relation(fields: [userId], references: [id])
-
-  @@index([userId], map: "Category_userId_fkey")
-}
-
-model Comment {
-  id        String   @id
-  createdAt DateTime @default(now())
-  updatedAt DateTime
-  username  String
-  desc      String
-  postId    String
-  userId    String
-  Post      Post     @relation(fields: [postId], references: [id])
-  User      User     @relation(fields: [userId], references: [id])
-
-  @@index([postId], map: "Comment_postId_fkey")
-  @@index([userId], map: "Comment_userId_fkey")
-}
-
-model Post {
-  id                String              @id
-  createdAt         DateTime            @default(now())
-  updatedAt         DateTime
-  title             String
-  desc              String              @db.Text
-  image             String?
-  likes             Int                 @default(0)
-  userId            String
-  status            String
-  CategoriesOnPosts CategoriesOnPosts[]
-  Comment           Comment[]
-  User              User                @relation(fields: [userId], references: [id])
-
-  @@index([userId], map: "Post_userId_fkey")
-}
-
-model User {
-  id             String     @id
-  createdAt      DateTime   @default(now())
-  updatedAt      DateTime
-  username       String     @unique
-  email          String     @unique
-  hashedPassword String
-  Category       Category[]
-  Comment        Comment[]
-  Post           Post[]
-}
